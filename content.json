{"meta":{"title":"kaijun","subtitle":null,"description":"分享促进生产力","author":"樊开俊","url":"https://www.toshareword.com"},"pages":[{"title":"about","date":"2018-08-19T04:29:37.000Z","updated":"2018-08-26T14:03:51.961Z","comments":false,"path":"about/index.html","permalink":"https://www.toshareword.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-19T04:28:03.253Z","updated":"2018-08-19T04:28:03.221Z","comments":false,"path":"tags/index.html","permalink":"https://www.toshareword.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-08-19T04:28:34.305Z","updated":"2018-08-19T04:28:34.264Z","comments":false,"path":"categories/index.html","permalink":"https://www.toshareword.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"CG脚本开发之python基础概念（一）","slug":"new-CG-jiaoben-jichu1","date":"2018-10-24T15:58:08.000Z","updated":"2018-10-24T15:57:32.169Z","comments":true,"path":"2018/10/24/new-CG-jiaoben-jichu1/","link":"","permalink":"https://www.toshareword.com/2018/10/24/new-CG-jiaoben-jichu1/","excerpt":"","text":"## python基础之常量与变量 女朋友说一节分享不要超过10分钟不然她看不懂 ### print print 是告诉机器打印一个结果到我运行代码的终端或者编辑器里，比如你输入123456print \"Hello World\" # 输入代码&gt;&gt;&gt;hello world # 结果------------------------a = 2 # 定义变量a的值为2print a # 打印变量a的结果&gt;&gt;&gt;2 # 输出这个变量里面的值 在python里面一切皆对象，只要是对象都可以通过print进行打印进行显示。 ### 变量与常量 我们小学三年级的时候学过一元一次方程:$${X+1=2}$$其中x就叫做未知常量，为什么说它是常量呢？因为它的值是固定不变的，它的结果就是$${X=1}$$细心的朋友可能就会问了，平常我们写公式的时候X都是小写x,你这为什么大写呢，因为你在写python代码的时候别人一看就会知道你这个大写单词是常量。123NUMBER = 3 # 声明常量NUMBER的值为3print NUMBER&gt;&gt;&gt;3 那什么是变量的，顾名思义就是你声明的这个变量，它在程序的运行中是在变化的1234number = 3 # 声明变量number的值为3number = 100 # 给变量number赋值100print number&gt;&gt;&gt;100 如果你不想更深的了解python的变量声明与赋值，你可以像理解咱们小学一元一次方程式里的X一样，x就是你赋予它的这个值，你赋予它是3，那么5-x就是等于2，x就是3。 如果你想更深的了解，我也可以给你详细的说下1234n = 3 # 把3赋值给n，计算机会在你的内存里面开辟一片空间用来存放3这个值，然后把存放3这个值的内存地址给n然后让n指向这个地址里面的值，以后在代码里调用n的时候就是调用n指向的这个地址，也就是说n的值等于3。a = n # 把n赋值给a，就是n把它指向的地址告诉a让a跟他指向同一个地址，所以现在a也指向存放3的这个内存地址n = 6 # 再把6赋值给n，现在你又给n重新赋值为6，那么n会指向存放6的内存地址，所以现在n的值为6不是3（3和6的内存存放地址是不变的，只是n指向的内存地址在变）b = 6 # 现在 b和n指向的是同一个内存地址所以b和n都是6 地址如图所示，长数字就是内存地址 下面来说一下python变量的书写，驼峰流与下划线流：主要目的是为了一眼可以看清这个变量（包括以后会说的，函数名，类名……）的意思，如下所示1234# 驼峰流（第一个单词字母小写，后面单词首字母大写）fileNumber = 3 # 你可以看单词就知道这个变量的意思，它代表的就是文件的个数# 下划线流（单词与单词之间下划线隔开）file_number = 3 # 你可以看单词就知道这个变量的意思，它代表的就是文件的个数 （个人建议使用下划线流，其实这两种并没有优劣之分） 总结下上面的重点 常量的字母要大写，在整个程序的运行中没有被赋予新的值 变量的字母要小写，在程序的运行中值是变化的，被赋予新的值 变量的声明其实是把值存储在内存，然后变量指向存储值的内存地址 =这个符号是指向的意思，a=3就是把变量a指向存储3的内存地址，b = a是把a指向的地址告诉b让b也指向这个地址（你也可以理解成a就是3，b也是3） 多个单词组成的变量或者常量要能明显的看出单词的分割，例如驼峰流，下划线流","categories":[{"name":"python","slug":"python","permalink":"https://www.toshareword.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.toshareword.com/tags/python/"},{"name":"教程","slug":"教程","permalink":"https://www.toshareword.com/tags/教程/"},{"name":"变量","slug":"变量","permalink":"https://www.toshareword.com/tags/变量/"},{"name":"常量","slug":"常量","permalink":"https://www.toshareword.com/tags/常量/"}]},{"title":"maya python设置maya的渲染设置","slug":"maya-cmd-return","date":"2018-08-26T14:07:08.000Z","updated":"2018-08-27T12:45:44.128Z","comments":true,"path":"2018/08/26/maya-cmd-return/","link":"","permalink":"https://www.toshareword.com/2018/08/26/maya-cmd-return/","excerpt":"","text":"如何使用python去设置maya的渲染设置通过改变某些渲染的设置值去获取命令众所周知我们改变某些值的时候在maya的脚本编辑器里面会有命令返回，我们直接运行这些命令就可以了这个我就不再细说了 如何获取脚本编辑器里面没有返回的命令1.maya里面的渲染设置是一个节点 2.如何去获取那些节点的属性123456import maya.cmds as cmds render_glob = \"defaultRenderGlobals\"list_Attr = cmds.listAttr(render_glob, r=True, s=True)for attr in list_Attr: get_attr_name = \"%s.%s\"%(render_glob, attr) print \"setAttr %s %s\"%(get_attr_name, cmds.getAttr(get_attr_name)) 3.获取的节点如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697setAttr defaultRenderGlobals.caching FalsesetAttr defaultRenderGlobals.isHistoricallyInteresting 2setAttr defaultRenderGlobals.nodeState 0setAttr defaultRenderGlobals.frozen FalsesetAttr defaultRenderGlobals.macCodec 1919706400setAttr defaultRenderGlobals.macDepth 32setAttr defaultRenderGlobals.macQual 1024setAttr defaultRenderGlobals.comFrrt 24setAttr defaultRenderGlobals.renderAll TruesetAttr defaultRenderGlobals.ignoreFilmGate TruesetAttr defaultRenderGlobals.clipFinalShadedColor TruesetAttr defaultRenderGlobals.enableDepthMaps TruesetAttr defaultRenderGlobals.enableDefaultLight TruesetAttr defaultRenderGlobals.enableStrokeRender TruesetAttr defaultRenderGlobals.onlyRenderStrokes FalsesetAttr defaultRenderGlobals.imageFormat 11setAttr defaultRenderGlobals.gammaCorrection 1.0setAttr defaultRenderGlobals.exrCompression 0setAttr defaultRenderGlobals.exrPixelType 0setAttr defaultRenderGlobals.topRegion 256setAttr defaultRenderGlobals.leftRegion 0setAttr defaultRenderGlobals.bottomRegion 0setAttr defaultRenderGlobals.rightRegion 256setAttr defaultRenderGlobals.useRenderRegion FalsesetAttr defaultRenderGlobals.animation TruesetAttr defaultRenderGlobals.animationRange 1setAttr defaultRenderGlobals.startFrame 1.0setAttr defaultRenderGlobals.endFrame 10.0setAttr defaultRenderGlobals.byFrame 1.0setAttr defaultRenderGlobals.byFrameStep 1.0setAttr defaultRenderGlobals.skipExistingFrames FalsesetAttr defaultRenderGlobals.modifyExtension FalsesetAttr defaultRenderGlobals.startExtension 1.0setAttr defaultRenderGlobals.byExtension 1.0setAttr defaultRenderGlobals.extensionPadding 4setAttr defaultRenderGlobals.fieldExtControl 0setAttr defaultRenderGlobals.outFormatControl 0setAttr defaultRenderGlobals.useMayaFileName TruesetAttr defaultRenderGlobals.useFrameExt FalsesetAttr defaultRenderGlobals.putFrameBeforeExt FalsesetAttr defaultRenderGlobals.periodInExt 1setAttr defaultRenderGlobals.multiCamNamingMode 0setAttr defaultRenderGlobals.composite FalsesetAttr defaultRenderGlobals.compositeThreshold 0.0setAttr defaultRenderGlobals.shadowsObeyLightLinking TruesetAttr defaultRenderGlobals.shadowsObeyShadowLinking FalsesetAttr defaultRenderGlobals.recursionDepth 2setAttr defaultRenderGlobals.leafPrimitives 200setAttr defaultRenderGlobals.subdivisionPower 0.25setAttr defaultRenderGlobals.subdivisionHashSize 5setAttr defaultRenderGlobals.logRenderPerformance FalsesetAttr defaultRenderGlobals.geometryVector 20setAttr defaultRenderGlobals.shadingVector 60setAttr defaultRenderGlobals.maximumMemory 48setAttr defaultRenderGlobals.numCpusToUse 0setAttr defaultRenderGlobals.interruptFrequency 1setAttr defaultRenderGlobals.shadowPass FalsesetAttr defaultRenderGlobals.iprShadowPass FalsesetAttr defaultRenderGlobals.useFileCache TruesetAttr defaultRenderGlobals.optimizeInstances TruesetAttr defaultRenderGlobals.reuseTessellations TruesetAttr defaultRenderGlobals.matteOpacityUsesTransparency TruesetAttr defaultRenderGlobals.motionBlur FalsesetAttr defaultRenderGlobals.motionBlurByFrame 1.0setAttr defaultRenderGlobals.motionBlurUseShutter FalsesetAttr defaultRenderGlobals.motionBlurShutterOpen -0.5setAttr defaultRenderGlobals.motionBlurShutterClose 0.5setAttr defaultRenderGlobals.applyFogInPost FalsesetAttr defaultRenderGlobals.postFogBlur 1setAttr defaultRenderGlobals.createIprFile FalsesetAttr defaultRenderGlobals.blurLength 1.0setAttr defaultRenderGlobals.blurSharpness 1.0setAttr defaultRenderGlobals.smoothValue 2setAttr defaultRenderGlobals.useBlur2DMemoryCap TruesetAttr defaultRenderGlobals.blur2DMemoryCap 200.0setAttr defaultRenderGlobals.motionBlurType 1setAttr defaultRenderGlobals.useDisplacementBoundingBox TruesetAttr defaultRenderGlobals.smoothColor FalsesetAttr defaultRenderGlobals.keepMotionVector FalsesetAttr defaultRenderGlobals.iprRenderShading TruesetAttr defaultRenderGlobals.iprRenderShadowMaps TruesetAttr defaultRenderGlobals.iprRenderMotionBlur TruesetAttr defaultRenderGlobals.renderLayerEnable FalsesetAttr defaultRenderGlobals.forceTileSize FalsesetAttr defaultRenderGlobals.tileWidth 64setAttr defaultRenderGlobals.tileHeight 64setAttr defaultRenderGlobals.jitterFinalColor TruesetAttr defaultRenderGlobals.raysSeeBackground TruesetAttr defaultRenderGlobals.oversamplePaintEffects FalsesetAttr defaultRenderGlobals.oversamplePfxPostFilter FalsesetAttr defaultRenderGlobals.colorProfileEnabled FalsesetAttr defaultRenderGlobals.renderingColorProfile 2setAttr defaultRenderGlobals.inputColorProfile 3setAttr defaultRenderGlobals.outputColorProfile 2setAttr defaultRenderGlobals.renderedOutput 0这些代码可以直接在mel编辑器里面去运行 改变渲染摄像机123456789101112131415import maya.cmds as cmdsimport maya.mel as melrender_cam = 'persp'def change_render_cam(render_cam): render_cam_shape = cmds.listRelatives(render_cam, shapes=1)[0] cam_list = cmds.ls(type='camera') for cam_shap in cam_list: if cam_shap != render_cam_shape: cmds.setAttr(\"%s.renderable\"%cam_shap, 0) else: cmds.setAttr(\"%s.renderable\"%cam_shap, 1) # mel.eval('unifiedRenderGlobalsWindow;') #注销这一行不弹渲染窗口，对功能无影响 change_render_cam(render_cam)","categories":[{"name":"maya","slug":"maya","permalink":"https://www.toshareword.com/categories/maya/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.toshareword.com/tags/maya/"},{"name":"mel","slug":"mel","permalink":"https://www.toshareword.com/tags/mel/"},{"name":"python","slug":"python","permalink":"https://www.toshareword.com/tags/python/"},{"name":"python设置maya的渲染设置","slug":"python设置maya的渲染设置","permalink":"https://www.toshareword.com/tags/python设置maya的渲染设置/"}]},{"title":"python开发环境的搭建","slug":"python-install","date":"2018-08-26T14:07:08.000Z","updated":"2018-09-08T13:36:21.280Z","comments":true,"path":"2018/08/26/python-install/","link":"","permalink":"https://www.toshareword.com/2018/08/26/python-install/","excerpt":"","text":"一.安装python（以下都是在Windows上）目前CG软件支持的是python2.7点击下载python2.7最新版本:Windows x86-64 MSI installer记得安装所有的组件特别要注意选上pip和Add python.exe to Path 二.安装pycharmpycharm一个编写python代码的神器点击下载pycharm最新版本:Pycharm Community下载后直接默认安装 1. 破解pycharm使用激活码激活 修改hosts文件 ：将0.0.0.0 account.jetbrains.com添加到hosts文件最后，注意hosts文件无后缀，如果遇到无法修改或权限问题，可以采用覆盖的方法去替换hosts文件，Windows系统hosts文件路径为：c:\\windows\\system32\\drivers\\etc 复制激活码 ：1K71U8DBPNE-eyJsaWNlbnNlSWQiOiJLNzFVOERCUE5FIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifV0sImhhc2giOiI4OTA4Mjg5LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Owt3/+LdCpedvF0eQ8635yYt0+ZLtCfIHOKzSrx5hBtbKGYRPFDrdgQAK6lJjexl2emLBcUq729K1+ukY9Js0nx1NH09l9Rw4c7k9wUksLl6RWx7Hcdcma1AHolfSp79NynSMZzQQLFohNyjD+dXfXM5GYd2OTHya0zYjTNMmAJuuRsapJMP9F1z7UTpMpLMxS/JaCWdyX6qIs+funJdPF7bjzYAQBvtbz+6SANBgN36gG1B2xHhccTn6WE8vagwwSNuM70egpahcTktoHxI7uS1JGN9gKAr6nbp+8DbFz3a2wd+XoF3nSJb/d2f/6zJR8yJF8AOyb30kwg3zf5cWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 2. pycharm设置python解释器File-&gt;New Project 新建一个项目File-&gt;Setting 三.安装pyside2 目前maya2016之后不包括2016的界面使用的是pyside2所以之后写界面就是用pyside2在pypi上搜不到Pyside2，因为官方没有打包放上去，所以我们安装预编译包，在cmd窗口运行以下代码1pip install --index-url=http://download.qt.io/snapshots/ci/pyside/5.11/latest/ pyside2 --trusted-host download.qt.io 可以运行以下官方示例测试是否安装正确,正确的话会弹出一个hello world窗口12345678import sysfrom PySide2.QtWidgets import QApplication, QLabelif __name__ == \"__main__\": app = QApplication([]) label = QLabel(\"Hello World\") label.show() sys.exit(app.exec_()) 四.安装gitgit下载下载完后直接运行exe文件，git教程直接去廖雪峰的网站去看 五.如何使用maya的python解释器 打开cmd ：进入mayapy.exe所在的文件夹（默认安装maya的话路径在C:\\Program Files\\Autodesk\\Maya2018\\bin） 1cd C:\\Program Files\\Autodesk\\Maya2018\\bin 创建链接 ：mklink python.exe mayapy.exe pycharm 可以指认maya的python解释器了 ：重复2.2.2 pycharm设置python解释器 这个时候你在pycharm里面写maya的代码是没有帮助显示的，需要下载一个maya的devkit pycharm 使用maya的python解释器写cmds，pymel显示帮助信息 ： 点击下载devkit 解压后把devkit文件夹拷贝到你的maya安装目录C:\\Program Files\\Autodesk\\Maya2018（这是我的安装目录） 然后你在pycharm里调用maya的api就会有提示，一般我都不用这个，我是在maya的脚本编辑窗口写的。","categories":[{"name":"maya","slug":"maya","permalink":"https://www.toshareword.com/categories/maya/"}],"tags":[{"name":"maya","slug":"maya","permalink":"https://www.toshareword.com/tags/maya/"},{"name":"python","slug":"python","permalink":"https://www.toshareword.com/tags/python/"},{"name":"教程","slug":"教程","permalink":"https://www.toshareword.com/tags/教程/"},{"name":"pyside2","slug":"pyside2","permalink":"https://www.toshareword.com/tags/pyside2/"},{"name":"pycharm","slug":"pycharm","permalink":"https://www.toshareword.com/tags/pycharm/"},{"name":"git","slug":"git","permalink":"https://www.toshareword.com/tags/git/"}]},{"title":"hexo使用","slug":"testBlog","date":"2018-08-16T15:46:51.000Z","updated":"2018-08-19T23:59:46.475Z","comments":true,"path":"2018/08/16/testBlog/","link":"","permalink":"https://www.toshareword.com/2018/08/16/testBlog/","excerpt":"","text":"这是hexo的使用hexo n “我的博客” == hexo new “我的博客” #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署 hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.toshareword.com/categories/hexo/"}],"tags":[{"name":"使用hexo","slug":"使用hexo","permalink":"https://www.toshareword.com/tags/使用hexo/"}]}]}