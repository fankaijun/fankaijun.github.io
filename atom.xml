<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kaijun</title>
  <icon>https://www.gravatar.com/avatar/10b0210c79b974bbf247aefbef1206dc</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.toshareword.com/"/>
  <updated>2018-11-11T02:47:37.796Z</updated>
  <id>https://www.toshareword.com/</id>
  
  <author>
    <name>樊开俊</name>
    <email>826530928@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CG脚本开发之python列表tuple元组</title>
    <link href="https://www.toshareword.com/2018/11/11/new-CG-jiaoben-jichu4/"/>
    <id>https://www.toshareword.com/2018/11/11/new-CG-jiaoben-jichu4/</id>
    <published>2018-11-11T02:30:58.000Z</published>
    <updated>2018-11-11T02:47:37.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a><center>元组（tuple）</center></h3><p>元组是我们cg开发中常用的数据类型，跟列表一样可以存储很多对象，<strong>他们的区别在于list里边里面的值可以修改而元组里面的值不可修改。</strong></p><p><strong>什么是元组：凡是使用圆括号括起来的就是元组，除空元组外，其他的元组里面必须用逗号分割里面的元素，元组里只有一个元素的后面必须有一个逗号。元组里面的元素对象不可更换但是对象本身可以改变（下面解释这句话）。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">text_tuple = () <span class="comment"># 定义一个空元组</span></span><br><span class="line"></span><br><span class="line">type(text_tuple) <span class="comment"># 打印变量类型</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">3</span>]: tuple <span class="comment"># 显示变量的类型是元组</span></span><br><span class="line"></span><br><span class="line">text_tuple = (<span class="number">1</span>) <span class="comment"># 定义一个变量</span></span><br><span class="line"></span><br><span class="line">type(text_tuple) <span class="comment"># 打印变量类型</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">5</span>]: int <span class="comment"># 显示变量的类型是整数</span></span><br><span class="line"></span><br><span class="line">text_tuple = (<span class="number">1</span>,) <span class="comment"># 定义一个变量</span></span><br><span class="line"></span><br><span class="line">type(text_tuple) <span class="comment"># 打印变量类型</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">7</span>]: tuple <span class="comment"># 显示变量的类型是元组</span></span><br><span class="line"></span><br><span class="line">text_tuple = (<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 定义一个变量</span></span><br><span class="line"></span><br><span class="line">type(text_tuple) <span class="comment"># 打印变量类型</span></span><br><span class="line"></span><br><span class="line">Out[<span class="number">9</span>]: tuple <span class="comment"># 显示变量的类型是元组</span></span><br></pre></td></tr></table></figure></p><p><em>从上面可以看出当你定义只有一个元素元组时在元素后面必须加上一个逗号。</em></p><h3 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a><center>修改元组</center></h3><p>请看例子：</p><p><strong>元组的每个索引位置都指向一个内存地址（这个是理解上面那句话的核心）</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3</span> <span class="comment"># 计算机会开辟一片内存用来存储3这个地址，并让num指向这个内存地址</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>，num] <span class="comment"># 计算机会开辟一片内存用来存储列表的地址，并让list指向这个内存地址，num把自己指向的内存地址给list的第二个索引元素list[1]让它也指向这个地址</span></span><br><span class="line"></span><br><span class="line">tupel = (<span class="number">1</span>,num, list) <span class="comment"># 计算机会开辟一片内存用来存储元组的地址，并让tupel指向这个内存地址，tupel第一个索引tupel[0]指向元素1的内存地址，tupel第二个索引tupel[1]指向元素num的所指向的内存地址，tupel第三个索引tupel[2]指向元素list的所指向的内存地址</span></span><br><span class="line"></span><br><span class="line">现在来说说什么是“元组里面的元素对象不可更换（元组里面索引位置指向的内存地址不可改变）”</span><br><span class="line"></span><br><span class="line">tupel[<span class="number">0</span>] = <span class="number">9</span> <span class="comment"># 计算机会新创建一个内存存储9并返回内存地址，现在让tupel第一个索引tupel[0]的指向的刚返回的内存地址，违背了“元组里面索引位置指向的内存地址不可改变”这句话</span></span><br><span class="line"></span><br><span class="line">就会报错：TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line">因为元组里面的元素对象不可更换，这句话就是说“元组里面索引位置指向的内存地址不可改变”</span><br><span class="line"></span><br><span class="line">num = <span class="number">6</span> <span class="comment"># 给num从新赋值</span></span><br><span class="line"></span><br><span class="line">tupel[<span class="number">2</span>][<span class="number">1</span>] = num</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tupel</span><br><span class="line"></span><br><span class="line">结果是（<span class="number">1</span>， <span class="number">3</span>， [<span class="number">1</span>，<span class="number">6</span>]）</span><br><span class="line"></span><br><span class="line">你可能会问为啥第三个元素可以改变</span><br><span class="line"></span><br><span class="line">然后你认真读下这句话：元组里面索引位置指向的内存地址不可改变，即tupel[<span class="number">0</span>]，tupel[<span class="number">1</span>]，tupel[<span class="number">2</span>]这个三个指向内存地址没有改变，所以你就会说对啊，不应该是</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>， <span class="number">3</span>， [<span class="number">1</span>，<span class="number">3</span>]），但是tupel[<span class="number">2</span>]指向列表list的内存地址，tupel[<span class="number">2</span>]的这个指向的内存地址并没有改变，而是内存里存储的值改变了，因为列表里的索引指向的内存地址是可以改变的，我如果还是没有说清楚的话欢迎私信我</span><br></pre></td></tr></table></figure></p><h3 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a><center>访问元组</center></h3><p>获取元组里面元素的方法跟list一样可以通过索引进行访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tub = （<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>, <span class="number">4</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tub[<span class="number">0</span>] <span class="comment"># 索引是从0开始的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tub[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tub[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 通过切片索引,是获取第2个元素到第3个元素之间的元素，用数学坐标的方法理解就是[1，3）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">print</span> tub[:<span class="number">3</span>] <span class="comment"># 通过切片索引,是获取第0个元素到第3个元素之间的元素，用数学坐标的方法理解就是[0，3）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>，<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">print</span> tub[<span class="number">1</span>:] <span class="comment"># 通过切片索引,是获取第1个元素到最后一个元素之间的元素，用数学坐标的方法理解就是[0，3）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>，<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="keyword">print</span> tub[<span class="number">0</span>:<span class="number">-1</span>] <span class="comment"># 通过切片索引,是获取最后一个元素到倒数第二个元素之间的元素，用数学坐标的方法理解就是[0，-2）只要是负数就是从后往前数第几个元素，最后一个元素的索引是-1 相当于tub[0:2]，用数学坐标的方法理解就是[0，2）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>，<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>下面给爱学习的你留个作业:</p><ul><li><p>用心体会下上面说过的话</p></li><li><p>自己分析下元组与列表的区别</p></li><li><p>分析下什么情况下使用列表什么情况下使用元组 </p></li></ul><p><strong>这些之后会在cg开发的案例中使用，只有你真正理解了才能游刃有余。</strong></p><blockquote><p>送给大家一句话也是我刚开始学python的时候RenderG的张杰杰哥给我说的一句话：用心去体会代码，这样你才能更好的理解。体会体会体会</p></blockquote><p>一定要自己去尝试可以直接在maya的脚本编辑器里去做练习，选择python</p><h2 id="欢迎扫下方二维码关注我的微信公众号，每周都有新分享说句有点那啥的话：为中国影视流程工业化的崛起而学习python"><a href="#欢迎扫下方二维码关注我的微信公众号，每周都有新分享说句有点那啥的话：为中国影视流程工业化的崛起而学习python" class="headerlink" title="欢迎扫下方二维码关注我的微信公众号，每周都有新分享说句有点那啥的话：为中国影视流程工业化的崛起而学习python"></a><em>欢迎扫下方二维码关注我的微信公众号，每周都有新分享</em>说句有点那啥的话：为中国影视流程工业化的崛起而学习python</h2>]]></content>
    
    <summary type="html">
    
      python元组
    
    </summary>
    
      <category term="python" scheme="https://www.toshareword.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="教程" scheme="https://www.toshareword.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="数据类型" scheme="https://www.toshareword.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="元组" scheme="https://www.toshareword.com/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>python 目录</title>
    <link href="https://www.toshareword.com/2018/10/28/mulv/"/>
    <id>https://www.toshareword.com/2018/10/28/mulv/</id>
    <published>2018-10-28T13:44:12.000Z</published>
    <updated>2018-10-28T13:47:59.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cg流程系统开发"><a href="#cg流程系统开发" class="headerlink" title="cg流程系统开发"></a><center>cg流程系统开发</center></h2><h4 id="CG插件python开发环境的搭建"><a href="#CG插件python开发环境的搭建" class="headerlink" title="CG插件python开发环境的搭建"></a><center><a href="https://www.toshareword.com/2018/08/26/python-install/">CG插件python开发环境的搭建</a></center></h4><h4 id="CG插件之python基础概念之变量与常量"><a href="#CG插件之python基础概念之变量与常量" class="headerlink" title="CG插件之python基础概念之变量与常量"></a><center><a href="https://www.toshareword.com/2018/10/24/new-CG-jiaoben-jichu1/">CG插件之python基础概念之变量与常量</a></center></h4><h4 id="CG插件之python基础概念之数字与字符串"><a href="#CG插件之python基础概念之数字与字符串" class="headerlink" title="CG插件之python基础概念之数字与字符串"></a><center><a href="https://www.toshareword.com/2018/10/25/new-CG-jiaoben-jichu2/">CG插件之python基础概念之数字与字符串</a></center></h4><h4 id="CG插件之python基础概念之列表"><a href="#CG插件之python基础概念之列表" class="headerlink" title="CG插件之python基础概念之列表"></a><center><a href="https://www.toshareword.com/2018/10/28/new-CG-jiaoben-jichu3/">CG插件之python基础概念之列表</a></center></h4>]]></content>
    
    <summary type="html">
    
      python
    
    </summary>
    
      <category term="python" scheme="https://www.toshareword.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CG脚本开发之python列表list</title>
    <link href="https://www.toshareword.com/2018/10/28/new-CG-jiaoben-jichu3/"/>
    <id>https://www.toshareword.com/2018/10/28/new-CG-jiaoben-jichu3/</id>
    <published>2018-10-28T13:20:30.000Z</published>
    <updated>2018-10-28T13:23:01.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CG脚本开发之python列表list"><a href="#CG脚本开发之python列表list" class="headerlink" title=" CG脚本开发之python列表list"></a><center> CG脚本开发之python列表list</center></h2><blockquote><p>在Python里一切皆对象</p></blockquote><h3 id="什么是列表"><a href="#什么是列表" class="headerlink" title=" 什么是列表"></a><center> 什么是列表</center></h3><p>列表是我们使用Python在cg开发中最常用的数据类型因为列表里面可以存储很多的对象，下面我们就来说说列表<br><strong>什么是列表：中括号括起来就是列表</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">one = <span class="string">'1'</span> <span class="comment"># 一个字符串对象</span></span><br><span class="line">tow = <span class="number">8</span> <span class="comment"># 一个整型对象</span></span><br><span class="line">there = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="string">"sss"</span>] <span class="comment">#一个列表对象</span></span><br><span class="line">list_four = [one，tow，there] <span class="comment"># 列表里有几个对象就有几个元素</span></span><br></pre></td></tr></table></figure></p><p>我再说下什么是对象：字符串，数字，列表，元祖，字典，类的实例化对象这些都是对象<br><strong>我使用一个凡是定义下对象：凡是使用dir（）函数可以返回一个列表的就是对象</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_name = <span class="string">'aa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(str_name)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'_formatter_field_name_split'</span>, <span class="string">'_formatter_parser'</span>, <span class="string">'capitalize'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'decode'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isdigit'</span>, <span class="string">'islower'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>对于list_four的这个列表可能会有人说这个列表里面有6个元素，那么现在我们再看下这个</p><h3 id="如何去使用列表的增删改查等方法（授人以鱼不如授人以渔）"><a href="#如何去使用列表的增删改查等方法（授人以鱼不如授人以渔）" class="headerlink" title="如何去使用列表的增删改查等方法（授人以鱼不如授人以渔）"></a><center>如何去使用列表的增删改查等方法（授人以鱼不如授人以渔）</center></h3><p>我们来看下list对象里有哪些方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_name = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(list_name)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__delslice__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__iadd__'</span>, <span class="string">'__imul__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__setslice__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>]</span><br><span class="line">以下划线开头的标识符是有特殊意义的。以单下划线开头（ _foo） 的代表不能直接访问的对象属性，需通过对象提供的接口进行访问</span><br><span class="line">以双下划线开头的 __foo 代表类的私有成员；以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数</span><br><span class="line">不以下划线开头或者结尾的是可以直接访问的对象属性或者方法</span><br></pre></td></tr></table></figure></p><p>下面我们就来说说列表的方法：<br>从上面我们可以看出列表可以直接访问的方法有’append’, ‘count’, ‘extend’, ‘index’, ‘insert’, ‘pop’, ‘remove’, ‘reverse’, ‘sort’<br>来我们现在从单词意思来看</p><ul><li>append：添加</li><li>count：计数</li><li>extend：延伸</li><li>index：索引</li><li>insert：插入</li><li>pop：抛弃</li><li>remove：移除</li><li>reverse：反向</li><li>sort：分类，排序<br>基本我们想对列表的任何操作都有相应的方法去做<br>我们可以使用以下方式得到其中一个方法详细的使用说明<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(list_name.remove) <span class="comment"># 下面有对这个函数的详细介绍</span></span><br><span class="line">Help on built-<span class="keyword">in</span> function remove:</span><br><span class="line"></span><br><span class="line">remove(...)</span><br><span class="line">    L.remove(value) -- remove first occurrence of value.</span><br><span class="line">    Raises ValueError <span class="keyword">if</span> the value <span class="keyword">is</span> <span class="keyword">not</span> present.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_name.remove(<span class="number">2</span>) <span class="comment"># 把对象2移除 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list_name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">3</span>] <span class="comment"># 现在的结果</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(list_name.pop)<span class="comment"># 下面有对这个函数的详细介绍</span></span><br><span class="line">Help on built-<span class="keyword">in</span> function pop:</span><br><span class="line"></span><br><span class="line">pop(...)</span><br><span class="line">    L.pop([index]) -&gt; item -- remove and return item at index (default last).</span><br><span class="line">    Raises IndexError <span class="keyword">if</span> list <span class="keyword">is</span> empty <span class="keyword">or</span> index <span class="keyword">is</span> out of range.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_name.pop() <span class="comment"># 把对象3移除 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list_name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>] <span class="comment"># 现在的结果</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(list_name.append) <span class="comment"># 下面有对这个函数的详细介绍</span></span><br><span class="line">Help on built-<span class="keyword">in</span> function append:</span><br><span class="line"></span><br><span class="line">append(...)</span><br><span class="line">    L.append(object) -- append object to end</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_name.append(<span class="number">2</span>) <span class="comment"># 把对象3移除 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list_name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># 现在的结果</span></span><br></pre></td></tr></table></figure></li></ul><p>同理任何你想对任何对象进行操作都可以使用上面的方法。<br>下面留个作业<br>1.使用上面的dir（）跟help（）两个函数去了解字符串与数字类型对象的方法以及我没有说完的list的方法</p><blockquote><p>相信我，这两个函数是你学习python的神器</p></blockquote>]]></content>
    
    <summary type="html">
    
      python基础之数据类型
    
    </summary>
    
      <category term="python" scheme="https://www.toshareword.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="教程" scheme="https://www.toshareword.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="list" scheme="https://www.toshareword.com/tags/list/"/>
    
      <category term="help()" scheme="https://www.toshareword.com/tags/help/"/>
    
      <category term="dir()" scheme="https://www.toshareword.com/tags/dir/"/>
    
  </entry>
  
  <entry>
    <title>CG脚本开发之python基础概念（二）</title>
    <link href="https://www.toshareword.com/2018/10/25/new-CG-jiaoben-jichu2/"/>
    <id>https://www.toshareword.com/2018/10/25/new-CG-jiaoben-jichu2/</id>
    <published>2018-10-24T16:18:08.000Z</published>
    <updated>2018-10-24T16:22:19.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CG脚本开发之python基础概念"><a href="#CG脚本开发之python基础概念" class="headerlink" title="CG脚本开发之python基础概念"></a><center>CG脚本开发之python基础概念</center></h2><blockquote><p>女朋友说一节分享不要超过10分钟不然她看不懂</p></blockquote><p>　　咱们接着上节的说，你给变量起一个太随意的名字系统是不认的，那你怎么知道你起得名字随意不随意呢</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a><center>标识符命名规则</center></h3><p>　　什么是标识符：变量、常量、函数（之后会讲）、类（之后会讲）、等对象的名字就是标识符。<br>命名规则：</p><ul><li>只能包含数字、字母及下划线且数字不能开头</li><li>不能是python的关键字</li><li>标识符区分大小写（例如 number这个标识符与Number这个标识符就不是一个）</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><center>数据类型</center></h3><p>　　现在你给你的变量起了一个python承认的名字，你又给变量或者常量所赋了值，但是你赋予的值也是有类型的你知道么？下面咱们来说下python的数据类型</p><h5 id="数字类型（int-和float）"><a href="#数字类型（int-和float）" class="headerlink" title="数字类型（int 和float）"></a><center>数字类型（int 和float）</center></h5><p>　　我想我们接触到的第一个程序应该是小学的时候数学考试作弊使用的计算器了，它可以被输入整数和小数进行计算，但是呢，在程序中他们还有一个名字，整数叫做整型（int类型）小数叫做浮点型（float类型）。在python里面的你不需要想c语言那样先声明这个变量是什么类型的，python会自动去识别你赋予的这个值的类型，你的值是什么类型你的变量就是什么类型。<br>例如c++语言的变量声明<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number  <span class="comment">/*声明变量number为整型（int类型），并为其在虚拟内存中开辟一片空间*/</span></span><br><span class="line">number = <span class="number">3</span> <span class="comment">/*因为你声明的number为整型，所以你只能赋予它整数，如果赋予小数或者其他非整数就会报错*/</span></span><br></pre></td></tr></table></figure></p><p>例如python的变量声明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">3</span> <span class="comment"># 你声明变量number的时候，python就会根据你赋予值的类型来决定你变量的类型</span></span><br><span class="line">number = <span class="number">3.14</span> <span class="comment"># 虽然你前面声明的number = 3，number是个整型，但是你可以从新声明的现在他就是浮点型了</span></span><br></pre></td></tr></table></figure></p><h5 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a><center>字符串类型（string）</center></h5><p>什么是字符串：字符串是以单引号’或双引号”括起来的任意字符集</p><ul><li>单双引号括起来大家应该知道是什么意思吧（单引号括起来 ‘kuo qi lai’,双引号括起来”luoqiali”)</li><li>任意字符集（只要是你在键盘上按你的那些键，这个键的值能输入到你的编辑器里的都是字符)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"1"</span> <span class="comment"># 根据上面的定义来看a就是字符串类型</span></span><br><span class="line">a = <span class="string">'1'</span> <span class="comment"># 单引号与双引号并没有本质上的优劣</span></span><br><span class="line">b = <span class="string">'123456789+-*/`!@#$%^&amp;*()_+|&#125;&#123;POIUYTYTREWQASDFGHJKL:L"?&gt;&lt;MNNBVCCXZ&#125;'</span></span><br><span class="line"><span class="comment"># b 也符合上面对字符串的定义不是么？那他也是字符串</span></span><br></pre></td></tr></table></figure></li></ul><p>有时候我们写字符串的时候可能会需要跨行，比如我们在给我们写的函数写说明的时候，我们就会用到””” 你写的内容”””或者’’’ 你写的内容’’’,例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_show_infos</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Returns a dictionary containing general information about all shows.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data format is:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    'showname1' : &#123;</span></span><br><span class="line"><span class="string">         'root': 'c:/show/NAME1',</span></span><br><span class="line"><span class="string">         ...</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">    'showname2' : ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">:return: a ShowInfo namedtuple for each show contains various data</span></span><br><span class="line"><span class="string">:rtype: dict[str, ShowInfo]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></p><h4 id="布尔类型（bool）"><a href="#布尔类型（bool）" class="headerlink" title="布尔类型（bool）"></a><center>布尔类型（bool）</center></h4><p>什么是布尔值：True和False这两个是布尔值（），这个类型就这俩值。<br>在写代码的过程中如何获取bool值呢？有两种方式：</p><ul><li>自己直接使用比如 number = True或者你调用函数return True</li><li>还有就是通过逻辑运算（逻辑运算又称布尔运算）<br>解释下逻辑运算：逻辑运算的与（and）或（or）非（not）</li></ul><h5 id="与（and）"><a href="#与（and）" class="headerlink" title="与（and）"></a><center>与（and）</center></h5><p>“与”的运算就是当两边都成立的时候返回True当两边中有一个不成立或者两个都不成立的时候返回False<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>&gt;<span class="number">1</span>(成立) <span class="keyword">and</span> <span class="number">1</span>&lt;<span class="number">3</span>(成立)  <span class="comment"># 这个逻辑判断返回的值就是True</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">1</span>(不成立) <span class="keyword">and</span> <span class="number">1</span>&lt;<span class="number">3</span> (成立) <span class="comment"># 这个逻辑判断返回的值就是False</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">1</span> (不成立)<span class="keyword">and</span> <span class="number">1</span>&gt;<span class="number">3</span>(不成立)  <span class="comment"># 这个逻辑判断返回的值就是False</span></span><br></pre></td></tr></table></figure></p><h5 id="或（or）"><a href="#或（or）" class="headerlink" title="或（or）"></a><center>或（or）</center></h5><p>“或”的运算就是当两边都有一个成立的时候返回True当两边都不成立的时候返回False<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>&gt;<span class="number">1</span>(成立) <span class="keyword">and</span> <span class="number">1</span>&lt;<span class="number">3</span>(成立)  <span class="comment"># 这个逻辑判断返回的值就是True</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">1</span>(不成立) <span class="keyword">and</span> <span class="number">1</span>&lt;<span class="number">3</span> (成立) <span class="comment"># 这个逻辑判断返回的值就是True</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">1</span> (不成立)<span class="keyword">and</span> <span class="number">1</span>&gt;<span class="number">3</span>(不成立)  <span class="comment"># 这个逻辑判断返回的值就是False</span></span><br></pre></td></tr></table></figure></p><h5 id="非（not）"><a href="#非（not）" class="headerlink" title="非（not）"></a><center>非（not）</center></h5><p>“非”的运算是把结果反转过来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">True</span>  <span class="comment"># 这个逻辑判断返回的值就是False</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">False</span> <span class="comment"># 这个逻辑判断返回的值就是True</span></span><br></pre></td></tr></table></figure></p><p>这些bool类型以及逻辑运算会在条件语句来演示详细的说</p><h4 id="空值（None）"><a href="#空值（None）" class="headerlink" title="空值（None）"></a><center>空值（None）</center></h4><blockquote><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。——廖雪峰</p></blockquote><p>我们一般获取到空值是什么时候呢,比如我调用一个函数这个函数并没有返回值或者你return一个None：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line">number = hello()</span><br><span class="line"><span class="keyword">print</span> type（number）</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;type <span class="string">'NoneType'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hello world"</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">number = hello()</span><br><span class="line"><span class="keyword">print</span> type（number）</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;type <span class="string">'NoneType'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>我们下篇会说到数据类型列表，元组字典</p>]]></content>
    
    <summary type="html">
    
      python基础之数据类型
    
    </summary>
    
      <category term="python" scheme="https://www.toshareword.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="教程" scheme="https://www.toshareword.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="数据类型" scheme="https://www.toshareword.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="标识符命名规则" scheme="https://www.toshareword.com/tags/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>CG脚本开发之python基础概念（一）</title>
    <link href="https://www.toshareword.com/2018/10/24/new-CG-jiaoben-jichu1/"/>
    <id>https://www.toshareword.com/2018/10/24/new-CG-jiaoben-jichu1/</id>
    <published>2018-10-24T15:58:08.000Z</published>
    <updated>2018-10-24T16:07:58.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python基础之常量与变量"><a href="#python基础之常量与变量" class="headerlink" title="python基础之常量与变量"></a><center>python基础之常量与变量</center></h2><blockquote><p>女朋友说一节分享不要超过10分钟不然她看不懂</p></blockquote><h3 id="print"><a href="#print" class="headerlink" title="print"></a><center>print</center></h3><p>　　print 是告诉机器打印一个结果到我运行代码的终端或者编辑器里，比如你输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"Hello World"</span> <span class="comment"># 输入代码</span></span><br><span class="line">&gt;&gt;&gt;hello world <span class="comment"># 结果</span></span><br><span class="line">------------------------</span><br><span class="line">a = <span class="number">2</span> <span class="comment"># 定义变量a的值为2</span></span><br><span class="line"><span class="keyword">print</span> a <span class="comment"># 打印变量a的结果</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> <span class="comment"># 输出这个变量里面的值</span></span><br></pre></td></tr></table></figure></p><p>在python里面一切皆对象，只要是对象都可以通过print进行打印进行显示。</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a><center>变量与常量</center></h3><p>　　我们小学三年级的时候学过一元一次方程:$${X+1=2}$$<br>其中x就叫做未知常量，为什么说它是常量呢？因为它的值是固定不变的，它的结果就是$${X=1}$$<br>细心的朋友可能就会问了，平常我们写公式的时候X都是小写x,你这为什么大写呢，因为你在写python代码的时候别人一看就会知道你这个大写单词是常量。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NUMBER = <span class="number">3</span> <span class="comment"># 声明常量NUMBER的值为3</span></span><br><span class="line"><span class="keyword">print</span> NUMBER</span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>　　那什么是变量的，顾名思义就是你声明的这个变量，它在程序的运行中是在变化的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">3</span> <span class="comment"># 声明变量number的值为3</span></span><br><span class="line">number = <span class="number">100</span> <span class="comment"># 给变量number赋值100</span></span><br><span class="line"><span class="keyword">print</span> number</span><br><span class="line">&gt;&gt;&gt;<span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>　　如果你不想更深的了解python的变量声明与赋值，你可以像理解咱们小学一元一次方程式里的X一样，x就是你赋予它的这个值，你赋予它是3，那么5-x就是等于2，x就是3。<br>　　如果你想更深的了解，我也可以给你详细的说下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">3</span> <span class="comment"># 把3赋值给n，计算机会在你的内存里面开辟一片空间用来存放3这个值，然后把存放3这个值的内存地址给n然后让n指向这个地址里面的值，以后在代码里调用n的时候就是调用n指向的这个地址，也就是说n的值等于3。</span></span><br><span class="line">a = n <span class="comment"># 把n赋值给a，就是n把它指向的地址告诉a让a跟他指向同一个地址，所以现在a也指向存放3的这个内存地址</span></span><br><span class="line">n = <span class="number">6</span> <span class="comment"># 再把6赋值给n，现在你又给n重新赋值为6，那么n会指向存放6的内存地址，所以现在n的值为6不是3（3和6的内存存放地址是不变的，只是n指向的内存地址在变）</span></span><br><span class="line">b = <span class="number">6</span> <span class="comment"># 现在 b和n指向的是同一个内存地址所以b和n都是6</span></span><br></pre></td></tr></table></figure></p><p>地址如图所示，长数字就是内存地址</p><p>下面来说一下python变量的书写，驼峰流与下划线流：<br>主要目的是为了一眼可以看清这个变量（包括以后会说的，函数名，类名……）的意思，如下所示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 驼峰流（第一个单词字母小写，后面单词首字母大写）</span></span><br><span class="line">fileNumber = <span class="number">3</span>  <span class="comment"># 你可以看单词就知道这个变量的意思，它代表的就是文件的个数</span></span><br><span class="line"><span class="comment"># 下划线流（单词与单词之间下划线隔开）</span></span><br><span class="line">file_number = <span class="number">3</span>  <span class="comment"># 你可以看单词就知道这个变量的意思，它代表的就是文件的个数</span></span><br></pre></td></tr></table></figure></p><p>（个人建议使用下划线流，其实这两种并没有优劣之分）</p><blockquote><p>总结下上面的重点</p><ul><li>常量的字母要大写，在整个程序的运行中没有被赋予新的值</li><li>变量的字母要小写，在程序的运行中值是变化的，被赋予新的值</li><li>变量的声明其实是把值存储在内存，然后变量指向存储值的内存地址</li><li>=这个符号是指向的意思，a=3就是把变量a指向存储3的内存地址，b = a是把a指向的地址告诉b让b也指向这个地址（你也可以理解成a就是3，b也是3）</li><li>多个单词组成的变量或者常量要能明显的看出单词的分割，例如驼峰流，下划线流</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      python基础之常量与变量
    
    </summary>
    
      <category term="python" scheme="https://www.toshareword.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="教程" scheme="https://www.toshareword.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="变量" scheme="https://www.toshareword.com/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="常量" scheme="https://www.toshareword.com/tags/%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>python开发环境的搭建</title>
    <link href="https://www.toshareword.com/2018/08/26/python-install/"/>
    <id>https://www.toshareword.com/2018/08/26/python-install/</id>
    <published>2018-08-26T14:07:08.000Z</published>
    <updated>2018-09-08T13:36:21.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-安装python（以下都是在Windows上）"><a href="#一-安装python（以下都是在Windows上）" class="headerlink" title="一.安装python（以下都是在Windows上）"></a>一.安装python（以下都是在Windows上）</h2><p>目前CG软件支持的是python2.7<br>点击下载python2.7最新版本:<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Windows x86-64 MSI installer</a><br><img src="/2018/08/26/python-install/python_install/python.jpg" alt="python"><br>记得安装所有的组件特别要注意选上pip和Add python.exe to Path</p><h2 id="二-安装pycharm"><a href="#二-安装pycharm" class="headerlink" title="二.安装pycharm"></a>二.安装pycharm</h2><p>pycharm一个编写python代码的神器<br>点击下载pycharm最新版本:<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">Pycharm Community</a>下载后直接默认安装</p><h3 id="1-破解pycharm使用激活码激活"><a href="#1-破解pycharm使用激活码激活" class="headerlink" title="1. 破解pycharm使用激活码激活"></a>1. 破解pycharm使用激活码激活</h3><ul><li><strong>修改hosts文件</strong> ：将0.0.0.0 account.jetbrains.com添加到hosts文件最后，注意hosts文件无后缀，如果遇到无法修改或权限问题，可以采用覆盖的方法去替换hosts文件，Windows系统hosts文件路径为：c:\windows\system32\drivers\etc</li><li><strong>复制激活码</strong> ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K71U8DBPNE-eyJsaWNlbnNlSWQiOiJLNzFVOERCUE5FIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAxOS0wNS0wNCJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTA1LTA0In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMDUtMDQifV0sImhhc2giOiI4OTA4Mjg5LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Owt3/+LdCpedvF0eQ8635yYt0+ZLtCfIHOKzSrx5hBtbKGYRPFDrdgQAK6lJjexl2emLBcUq729K1+ukY9Js0nx1NH09l9Rw4c7k9wUksLl6RWx7Hcdcma1AHolfSp79NynSMZzQQLFohNyjD+dXfXM5GYd2OTHya0zYjTNMmAJuuRsapJMP9F1z7UTpMpLMxS/JaCWdyX6qIs+funJdPF7bjzYAQBvtbz+6SANBgN36gG1B2xHhccTn6WE8vagwwSNuM70egpahcTktoHxI7uS1JGN9gKAr6nbp+8DbFz3a2wd+XoF3nSJb/d2f/6zJR8yJF8AOyb30kwg3zf5cWw==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-pycharm设置python解释器"><a href="#2-pycharm设置python解释器" class="headerlink" title="2. pycharm设置python解释器"></a>2. pycharm设置python解释器</h3><p>File-&gt;New Project 新建一个项目<br>File-&gt;Setting<br><img src="/2018/08/26/python-install/python_install/set.png" alt="set1"><br><img src="/2018/08/26/python-install/python_install/set1.png" alt="set2"></p><h2 id="三-安装pyside2"><a href="#三-安装pyside2" class="headerlink" title="三.安装pyside2"></a>三.安装pyside2</h2><p>  目前maya2016之后不包括2016的界面使用的是pyside2所以之后写界面就是用pyside2<br>在pypi上搜不到Pyside2，因为官方没有打包放上去，所以我们安装预编译包，在cmd窗口运行以下代码<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --index-url=http://download.qt.io/snapshots/ci/pyside/<span class="number">5</span>.<span class="number">11</span>/latest/ pyside2 --trusted-host download.qt.io</span><br></pre></td></tr></table></figure></p><p>可以运行以下官方示例测试是否安装正确,正确的话会弹出一个hello world窗口<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication, QLabel</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    label = QLabel(<span class="string">"Hello World"</span>)</span><br><span class="line">    label.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><h2 id="四-安装git"><a href="#四-安装git" class="headerlink" title="四.安装git"></a>四.安装git</h2><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">git下载</a><br>下载完后直接运行exe文件，<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git教程</a>直接去廖雪峰的网站去看</p><h2 id="五-如何使用maya的python解释器"><a href="#五-如何使用maya的python解释器" class="headerlink" title="五.如何使用maya的python解释器"></a>五.如何使用maya的python解释器</h2><ul><li><p><strong>打开cmd</strong> ：进入mayapy.exe所在的文件夹（默认安装maya的话路径在C:\Program Files\Autodesk\Maya2018\bin）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files\Autodesk\Maya2018\bin</span><br></pre></td></tr></table></figure></li><li><p><strong>创建链接</strong> ：mklink python.exe mayapy.exe</p></li><li><p><strong>pycharm 可以指认maya的python解释器了</strong> ：<br>重复<a href="#2-pycharm设置python解释器">2.2.2 pycharm设置python解释器</a></p><p>  这个时候你在pycharm里面写maya的代码是没有帮助显示的，需要下载一个maya的devkit</p></li><li><p><strong>pycharm 使用maya的python解释器写cmds，pymel显示帮助信息</strong> ：</p><p>  点击下载<a href="https://www.autodesk.com/developer-network/platform-technologies/maya" target="_blank" rel="noopener">devkit</a><br>  解压后把devkit文件夹拷贝到你的maya安装目录C:\Program Files\Autodesk\Maya2018（这是我的安装目录）<br>  然后你在pycharm里调用maya的api就会有提示，一般我都不用这个，我是在maya的脚本编辑窗口写的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      python开发环境的搭建
    
    </summary>
    
      <category term="maya" scheme="https://www.toshareword.com/categories/maya/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="教程" scheme="https://www.toshareword.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="maya" scheme="https://www.toshareword.com/tags/maya/"/>
    
      <category term="pyside2" scheme="https://www.toshareword.com/tags/pyside2/"/>
    
      <category term="pycharm" scheme="https://www.toshareword.com/tags/pycharm/"/>
    
      <category term="git" scheme="https://www.toshareword.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>maya python设置maya的渲染设置</title>
    <link href="https://www.toshareword.com/2018/08/26/maya-cmd-return/"/>
    <id>https://www.toshareword.com/2018/08/26/maya-cmd-return/</id>
    <published>2018-08-26T14:07:08.000Z</published>
    <updated>2018-08-27T12:45:44.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用python去设置maya的渲染设置"><a href="#如何使用python去设置maya的渲染设置" class="headerlink" title="如何使用python去设置maya的渲染设置"></a>如何使用python去设置maya的渲染设置</h1><h3 id="通过改变某些渲染的设置值去获取命令"><a href="#通过改变某些渲染的设置值去获取命令" class="headerlink" title="通过改变某些渲染的设置值去获取命令"></a>通过改变某些渲染的设置值去获取命令</h3><p>众所周知我们改变某些值的时候在maya的脚本编辑器里面会有命令返回，我们直接运行这些命令就可以了<br>这个我就不再细说了<br><img src="/2018/08/26/maya-cmd-return/maya_cmd_return/maya_cmd_retuen1.jpg" alt="name1" title="如下图"></p><h3 id="如何获取脚本编辑器里面没有返回的命令"><a href="#如何获取脚本编辑器里面没有返回的命令" class="headerlink" title="如何获取脚本编辑器里面没有返回的命令"></a>如何获取脚本编辑器里面没有返回的命令</h3><h4 id="1-maya里面的渲染设置是一个节点"><a href="#1-maya里面的渲染设置是一个节点" class="headerlink" title="1.maya里面的渲染设置是一个节点"></a>1.maya里面的渲染设置是一个节点</h4><p><img src="/2018/08/26/maya-cmd-return/maya_cmd_return/maya_cmd_return2.jpg" alt="name2" title="请仔细观看下图"><br><img src="/2018/08/26/maya-cmd-return/maya_cmd_return/maya_cmd_retuen3.jpg" alt="name3" title="请仔细观看下图"></p><h4 id="2-如何去获取那些节点的属性"><a href="#2-如何去获取那些节点的属性" class="headerlink" title="2.如何去获取那些节点的属性"></a>2.如何去获取那些节点的属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds </span><br><span class="line">render_glob = <span class="string">"defaultRenderGlobals"</span></span><br><span class="line">list_Attr = cmds.listAttr(render_glob, r=<span class="keyword">True</span>, s=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> attr <span class="keyword">in</span> list_Attr:</span><br><span class="line">    get_attr_name = <span class="string">"%s.%s"</span>%(render_glob, attr)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"setAttr %s %s"</span>%(get_attr_name, cmds.getAttr(get_attr_name))</span><br></pre></td></tr></table></figure><h4 id="3-获取的节点如下"><a href="#3-获取的节点如下" class="headerlink" title="3.获取的节点如下"></a>3.获取的节点如下</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.caching False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.isHistoricallyInteresting <span class="number">2</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.nodeState <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.frozen False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.macCodec <span class="number">1919706400</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.macDepth <span class="number">32</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.macQual <span class="number">1024</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.comFrrt <span class="number">24</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.renderAll True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.ignoreFilmGate True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.clipFinalShadedColor True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.enableDepthMaps True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.enableDefaultLight True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.enableStrokeRender True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.onlyRenderStrokes False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.imageFormat <span class="number">11</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.gammaCorrection <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.exrCompression <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.exrPixelType <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.topRegion <span class="number">256</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.leftRegion <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.bottomRegion <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.rightRegion <span class="number">256</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useRenderRegion False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.animation True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.animationRange <span class="number">1</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.startFrame <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.endFrame <span class="number">10.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.byFrame <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.byFrameStep <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.skipExistingFrames False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.modifyExtension False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.startExtension <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.byExtension <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.extensionPadding <span class="number">4</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.fieldExtControl <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.outFormatControl <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useMayaFileName True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useFrameExt False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.putFrameBeforeExt False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.periodInExt <span class="number">1</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.multiCamNamingMode <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.composite False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.compositeThreshold <span class="number">0.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.shadowsObeyLightLinking True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.shadowsObeyShadowLinking False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.recursionDepth <span class="number">2</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.leafPrimitives <span class="number">200</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.subdivisionPower <span class="number">0.25</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.subdivisionHashSize <span class="number">5</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.logRenderPerformance False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.geometryVector <span class="number">20</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.shadingVector <span class="number">60</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.maximumMemory <span class="number">48</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.numCpusToUse <span class="number">0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.interruptFrequency <span class="number">1</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.shadowPass False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.iprShadowPass False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useFileCache True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.optimizeInstances True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.reuseTessellations True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.matteOpacityUsesTransparency True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlur False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlurByFrame <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlurUseShutter False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlurShutterOpen <span class="number">-0.5</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlurShutterClose <span class="number">0.5</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.applyFogInPost False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.postFogBlur <span class="number">1</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.createIprFile False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.blurLength <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.blurSharpness <span class="number">1.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.smoothValue <span class="number">2</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useBlur2DMemoryCap True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.blur2DMemoryCap <span class="number">200.0</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.motionBlurType <span class="number">1</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.useDisplacementBoundingBox True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.smoothColor False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.keepMotionVector False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.iprRenderShading True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.iprRenderShadowMaps True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.iprRenderMotionBlur True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.renderLayerEnable False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.forceTileSize False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.tileWidth <span class="number">64</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.tileHeight <span class="number">64</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.jitterFinalColor True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.raysSeeBackground True</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.oversamplePaintEffects False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.oversamplePfxPostFilter False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.colorProfileEnabled False</span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.renderingColorProfile <span class="number">2</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.inputColorProfile <span class="number">3</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.outputColorProfile <span class="number">2</span></span><br><span class="line"><span class="keyword">setAttr</span> defaultRenderGlobals.renderedOutput <span class="number">0</span></span><br><span class="line"></span><br><span class="line">这些代码可以直接在mel编辑器里面去运行</span><br></pre></td></tr></table></figure><h3 id="改变渲染摄像机"><a href="#改变渲染摄像机" class="headerlink" title="改变渲染摄像机"></a>改变渲染摄像机</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.mel <span class="keyword">as</span> mel</span><br><span class="line"></span><br><span class="line">render_cam = <span class="string">'persp'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_render_cam</span><span class="params">(render_cam)</span>:</span></span><br><span class="line">    render_cam_shape = cmds.listRelatives(render_cam, shapes=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    cam_list = cmds.ls(type=<span class="string">'camera'</span>)</span><br><span class="line">    <span class="keyword">for</span> cam_shap <span class="keyword">in</span> cam_list:</span><br><span class="line">        <span class="keyword">if</span> cam_shap != render_cam_shape:</span><br><span class="line">            cmds.setAttr(<span class="string">"%s.renderable"</span>%cam_shap, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.setAttr(<span class="string">"%s.renderable"</span>%cam_shap, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># mel.eval('unifiedRenderGlobalsWindow;') #注销这一行不弹渲染窗口，对功能无影响        </span></span><br><span class="line"></span><br><span class="line">change_render_cam(render_cam)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      maya python设置maya的渲染设置
    
    </summary>
    
      <category term="maya" scheme="https://www.toshareword.com/categories/maya/"/>
    
    
      <category term="python" scheme="https://www.toshareword.com/tags/python/"/>
    
      <category term="maya" scheme="https://www.toshareword.com/tags/maya/"/>
    
      <category term="mel" scheme="https://www.toshareword.com/tags/mel/"/>
    
      <category term="python设置maya的渲染设置" scheme="https://www.toshareword.com/tags/python%E8%AE%BE%E7%BD%AEmaya%E7%9A%84%E6%B8%B2%E6%9F%93%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用</title>
    <link href="https://www.toshareword.com/2018/08/16/testBlog/"/>
    <id>https://www.toshareword.com/2018/08/16/testBlog/</id>
    <published>2018-08-16T15:46:51.000Z</published>
    <updated>2018-08-19T23:59:46.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是hexo的使用"><a href="#这是hexo的使用" class="headerlink" title="这是hexo的使用"></a>这是hexo的使用</h2><p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;这是hexo的使用&quot;&gt;&lt;a href=&quot;#这是hexo的使用&quot; class=&quot;headerlink&quot; title=&quot;这是hexo的使用&quot;&gt;&lt;/a&gt;这是hexo的使用&lt;/h2&gt;&lt;p&gt;hexo n “我的博客” == hexo new “我的博客” #新建文章&lt;br&gt;
      
    
    </summary>
    
      <category term="hexo" scheme="https://www.toshareword.com/categories/hexo/"/>
    
    
      <category term="使用hexo" scheme="https://www.toshareword.com/tags/%E4%BD%BF%E7%94%A8hexo/"/>
    
  </entry>
  
</feed>
